# Generated by Django 4.1.5 on 2023-01-12 17:14

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import aap_eda.core.enums


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Activation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("description", models.TextField()),
                ("working_directory", models.TextField()),
                ("execution_environment", models.TextField()),
                (
                    "restart_policy",
                    models.TextField(
                        choices=[
                            ("ALWAYS", "always"),
                            ("ON_FAILURE", "on-failure"),
                            ("NEVER", "never"),
                        ],
                        default=aap_eda.core.enums.RestartPolicy["ON_FAILURE"],
                    ),
                ),
                ("status", models.TextField()),
                ("is_enabled", models.BooleanField(default=True)),
                ("restarted_at", models.DateTimeField()),
                ("restart_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "core_activation",
            },
        ),
        migrations.CreateModel(
            name="ActivationInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("working_directory", models.TextField()),
                ("execution_environment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("large_data_id", models.IntegerField(null=True)),
            ],
            options={
                "db_table": "core_activation_instance",
            },
        ),
        migrations.CreateModel(
            name="ActivationInstanceJobInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "core_activation_instance_job_instance",
            },
        ),
        migrations.CreateModel(
            name="ActivationInstanceLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("line_number", models.IntegerField()),
                ("log", models.TextField()),
            ],
            options={
                "db_table": "core_activation_instance_log",
            },
        ),
        migrations.CreateModel(
            name="AuditRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("description", models.TextField()),
                ("status", models.TextField()),
                ("fired_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("definition", models.JSONField()),
            ],
            options={
                "db_table": "core_audit_rule",
            },
        ),
        migrations.CreateModel(
            name="ExtraVar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("extra_var", models.TextField()),
            ],
            options={
                "db_table": "core_extra_var",
            },
        ),
        migrations.CreateModel(
            name="Inventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(default="", null=True)),
                ("inventory", models.TextField(null=True)),
                (
                    "inventory_source",
                    models.TextField(
                        choices=[
                            ("PROJECT", "project"),
                            ("COLLECTION", "collection"),
                            ("USER_DEFINED", "user_defined"),
                            ("EXECUTION_ENV", "execution_env"),
                        ]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "core_inventory",
            },
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField()),
            ],
            options={
                "db_table": "core_job",
            },
        ),
        migrations.CreateModel(
            name="JobInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField()),
                ("action", models.TextField()),
                ("name", models.TextField()),
                ("ruleset", models.TextField()),
                ("rule", models.TextField()),
                ("hosts", models.TextField()),
            ],
            options={
                "db_table": "core_job_instance",
            },
        ),
        migrations.CreateModel(
            name="JobInstanceEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("job_uuid", models.UUIDField()),
                ("counter", models.IntegerField()),
                ("stdout", models.TextField()),
                ("type", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "core_job_instance_event",
            },
        ),
        migrations.CreateModel(
            name="JobInstanceHost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("job_uuid", models.UUIDField()),
                ("playbook", models.TextField()),
                ("play", models.TextField()),
                ("task", models.TextField()),
                ("status", models.TextField()),
            ],
            options={
                "db_table": "core_job_instance_host",
            },
        ),
        migrations.CreateModel(
            name="Playbook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("playbook", models.TextField()),
            ],
            options={
                "db_table": "core_playbook",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("git_hash", models.TextField()),
                ("url", models.TextField()),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("large_data_id", models.IntegerField(null=True)),
            ],
            options={
                "db_table": "core_project",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "role_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(default="")),
                ("is_default", models.BooleanField(default=False, null=True)),
            ],
            options={
                "db_table": "core_role",
            },
        ),
        migrations.CreateModel(
            name="Rulebook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("description", models.TextField(default="", null=True)),
                ("rulesets", models.TextField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.project",
                    ),
                ),
            ],
            options={
                "db_table": "core_rulebook",
            },
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "core_user_role",
            },
        ),
        migrations.CreateModel(
            name="Ruleset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("sources", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "rulebook",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.rulebook",
                    ),
                ),
            ],
            options={
                "db_table": "core_ruleset",
            },
        ),
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("action", models.JSONField(default=dict)),
                (
                    "ruleset",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.ruleset",
                    ),
                ),
            ],
            options={
                "db_table": "core_rule",
            },
        ),
        migrations.CreateModel(
            name="RolePermission",
            fields=[
                (
                    "role_permission_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "resource_type",
                    models.TextField(
                        choices=[
                            ("ACTIVATION", "activation"),
                            ("ACTIVATION_INSTANCE", "activation_instance"),
                            ("AUDIT_RULE", "audit_rule"),
                            ("JOB", "job"),
                            ("TASK", "task"),
                            ("USER", "user"),
                            ("PROJECT", "project"),
                            ("INVENTORY", "inventory"),
                            ("EXTRA_VAR", "extra_var"),
                            ("PLAYBOOK", "playbook"),
                            ("RULEBOOK", "rulebook"),
                            ("EXECUTION_ENV", "execution_env"),
                            ("ROLE", "role"),
                        ],
                        db_column="resource_type_enum",
                    ),
                ),
                (
                    "action",
                    models.TextField(
                        choices=[
                            ("CREATE", "create"),
                            ("READ", "read"),
                            ("UPDATE", "update"),
                            ("DELETE", "delete"),
                        ],
                        db_column="action_enum",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.role",
                    ),
                ),
            ],
            options={
                "db_table": "core_role_permission",
            },
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True),
                name="ck_empty_project_name",
            ),
        ),
        migrations.AddField(
            model_name="playbook",
            name="project",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.project",
            ),
        ),
        migrations.AddIndex(
            model_name="jobinstancehost",
            index=models.Index(
                fields=["job_uuid"], name="ix_job_host_job_uuid"
            ),
        ),
        migrations.AddIndex(
            model_name="jobinstanceevent",
            index=models.Index(
                fields=["job_uuid"], name="ix_job_instance_event_job_uuid"
            ),
        ),
        migrations.AddIndex(
            model_name="jobinstance",
            index=models.Index(fields=["name"], name="ix_job_instance_name"),
        ),
        migrations.AddIndex(
            model_name="jobinstance",
            index=models.Index(fields=["uuid"], name="ix_job_instance_uuid"),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(fields=["uuid"], name="ix_job_uuid"),
        ),
        migrations.AddField(
            model_name="inventory",
            name="project",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.project",
            ),
        ),
        migrations.AddField(
            model_name="extravar",
            name="project",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.project",
            ),
        ),
        migrations.AddField(
            model_name="auditrule",
            name="activation_instance",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.activationinstance",
            ),
        ),
        migrations.AddField(
            model_name="auditrule",
            name="job_instance",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.jobinstance",
            ),
        ),
        migrations.AddField(
            model_name="auditrule",
            name="rule_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.rule",
            ),
        ),
        migrations.AddField(
            model_name="auditrule",
            name="ruleset",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.ruleset",
            ),
        ),
        migrations.AddField(
            model_name="activationinstancelog",
            name="activation_instance",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.activationinstance",
            ),
        ),
        migrations.AddField(
            model_name="activationinstancejobinstance",
            name="activation_instance",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.activationinstance",
            ),
        ),
        migrations.AddField(
            model_name="activationinstancejobinstance",
            name="job_instance",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.jobinstance",
            ),
        ),
        migrations.AddField(
            model_name="activationinstance",
            name="extra_var",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.extravar"
            ),
        ),
        migrations.AddField(
            model_name="activationinstance",
            name="inventory",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.inventory",
            ),
        ),
        migrations.AddField(
            model_name="activationinstance",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.project"
            ),
        ),
        migrations.AddField(
            model_name="activationinstance",
            name="rulebook",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.rulebook"
            ),
        ),
        migrations.AddField(
            model_name="activation",
            name="extra_var_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.extravar"
            ),
        ),
        migrations.AddField(
            model_name="activation",
            name="inventory_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.inventory",
            ),
        ),
        migrations.AddField(
            model_name="activation",
            name="rulebook_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.rulebook"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userrole",
            unique_together={("user", "role")},
        ),
        migrations.AlterUniqueTogether(
            name="ruleset",
            unique_together={("rulebook_id", "name")},
        ),
        migrations.AddConstraint(
            model_name="rulebook",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True),
                name="ck_rulebook_name_not_empty",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rulebook",
            unique_together={("project_id", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="rule",
            unique_together={("ruleset", "name")},
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["resource_type", "action"],
                name="ix_role_perm_rsrc_typ_act",
            ),
        ),
        migrations.AddConstraint(
            model_name="rolepermission",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "resource_type__in",
                        (
                            "activation",
                            "activation_instance",
                            "audit_rule",
                            "job",
                            "task",
                            "user",
                            "project",
                            "inventory",
                            "extra_var",
                            "playbook",
                            "rulebook",
                            "execution_env",
                            "role",
                        ),
                    )
                ),
                name="ck_resource_type_values",
            ),
        ),
        migrations.AddConstraint(
            model_name="rolepermission",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("action__in", ("create", "read", "update", "delete"))
                ),
                name="ck_action_values",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rolepermission",
            unique_together={("role", "resource_type", "action")},
        ),
        migrations.AddIndex(
            model_name="inventory",
            index=models.Index(
                fields=["inventory_source"], name="ix_inventory_inv_src"
            ),
        ),
        migrations.AddConstraint(
            model_name="inventory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "inventory_source__in",
                        (
                            "project",
                            "collection",
                            "user_defined",
                            "execution_env",
                        ),
                    )
                ),
                name="ck_inventory_source_values",
            ),
        ),
        migrations.AddConstraint(
            model_name="inventory",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True),
                name="ck_empty_inventory_name",
            ),
        ),
        migrations.AddIndex(
            model_name="auditrule",
            index=models.Index(fields=["name"], name="ix_audit_rule_name"),
        ),
        migrations.AddIndex(
            model_name="auditrule",
            index=models.Index(
                fields=["fired_date"], name="ix_audit_rule_fired_date"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="activationinstancejobinstance",
            unique_together={("activation_instance", "job_instance")},
        ),
        migrations.AddIndex(
            model_name="activationinstance",
            index=models.Index(fields=["name"], name="ix_act_inst_name"),
        ),
        migrations.AddIndex(
            model_name="activation",
            index=models.Index(fields=["name"], name="ix_activation_name"),
        ),
    ]
